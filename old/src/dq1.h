#ifndef DQ1_H
#define DQ1_H

#ifdef __cplusplus
extern "C" {
#endif

/**********************************************************
** DQ1 復活の呪文解析用関数群
** @(#) $Header: dq1.h, v 0.3 1998/05/31 yotti $
**
** 漢字コードは Shift_JIS か EUC-JP を仮定
***********************************************************/

/**********************************************************
** 復活の呪文に含まれる各種データを格納する構造体
***********************************************************/
struct dq1pswd {
	int name[4] ; /* 0-63 */
	int wapon ; /* 0-7 */
	int armor ; /* 0-7 */
	int shild ; /* 0-3 */
	int item[8] ; /* 0-14 */
	int key ;	/* 魔法のカギ 0-6 */
	int herb ;	/* 薬草 0-6 */
	int exp ;	/* 経験値 0-65535 */
	int gold ;	/* 所持金 0-65535 */
	int flag1 ;	/* 竜の鱗を装備したことがあるか？ */
	int flag2 ; /* 戦士の指輪を装備しているか？ */
	int flag3 ; /* ドラゴンを倒したか？ */
	int flag4 ; /* ゴーレムを倒したか？ */
	int flag5 ; /* 死の首飾りを入手したことがあるか？ */
	int crypt ;	/* 暗号化のキー */

	int check ;	/* チェックコード：出力用 */
	int level ;	/* レベル：出力用 */
} ;


/**********************************************************
** 名前(int name1[4]) を文字列(char name2[9])に変換
**
** 呪文を解析( dq1_ana_pswd() )すると
** 復活の呪文用データ(struct dq1pswd)の中に
** int name[4] の名前が作られる
** この関数は、その int name[4] の名前を文字列に変換する
** 文字列は char [9] のエリアを確保して
** そのアドレスを渡すこと
***********************************************************/
void dq1_cnv_int2name(
	int *name1,
	char *name2) ;


/**********************************************************
** 名前(char *name1) を数字(int name2[4])に変換
**
** 文字列の名前を int [4] の名前に変換する
** 濁点・半濁点付きの文字も普通に読み換える
** 不正な文字があると、その時点で変換を中止する
***********************************************************/
void dq1_cnv_name2int(
	char *name1,
	int *name2) ;


/**********************************************************
** 呪文(int pswd1[20]) を文字列(char pswd2[47])に変換
**
** 呪文を作成( dq1_make_pswd() )した際の呪文(int[20])を
** 文字列に直す関数
** 47 byte 以上のエリアが必要
***********************************************************/
void dq1_cnv_int2pswd(
	int *pswd1,
	char *pswd2) ;


/**********************************************************
** 呪文(char *pswd1) を数字(int pswd2[20])に変換
**
** 呪文(char *)を呪文解析( dq1_ana_pswd() ) 用の
** 数字配列(int [20]) に変換する
** 「ぁゃっ」等の小さい文字は「あやつ」等に読み換える
** 「？」は 64 に変換する（特殊な処理用）
** 不正な文字は -1 に変換する
** 出力エリア pswd2 には int [20] のエリアが必要
**
** 戻り値は 0=エラー / 1=正常 / 2=「？」を含む
***********************************************************/
int dq1_cnv_pswd2int(
	char *pswd1,
	int *pswd2) ;


/**********************************************************
** 呪文を捏造する
**
** struct dq1pswd 型構造体の各データを基に、
** 復活の呪文(int [20])を作成する
** 構造体内のチェックコードのデータは使用しない
***********************************************************/
void dq1_make_pswd(
	struct dq1pswd *dq1,
	int *pswd) ;


/**********************************************************
** 呪文を解析する
**
** dq1_cnv_pswd2int() で作られた呪文解析用数字配列を基に
** 解析を行い、 struct dq1pswd 型構造体に各データを
** 格納する
** また、正しい呪文かどうかをチェックし
** 正しければ true(1) 、不正なら false(0) を返す
***********************************************************/
int dq1_ana_pswd(
	int *pswd,
	struct dq1pswd *dq1) ;


/**********************************************************
** アイテムリスト(14種類)
**
** dq1_item_list[0]  = アイテムを持っていない状態
** dq1_item_list[15] = 不正なアイテム番号
***********************************************************/
extern char *dq1_item_list[16] ;


/**********************************************************
** 武器リスト(7種類 ; 0 = 装備無し)
***********************************************************/
extern char *dq1_wapon_list[8] ;


/**********************************************************
** 鎧リスト(7種類 ; 0 = 装備無し)
***********************************************************/
extern char *dq1_armor_list[8] ;


/**********************************************************
** 盾リスト(3種類 ; 0 = 装備無し)
***********************************************************/
extern char *dq1_shild_list[4] ;


#ifdef __cplusplus
} ;
#endif


#endif /* DQ1_H */
